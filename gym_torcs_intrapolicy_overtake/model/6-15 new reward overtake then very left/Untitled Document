base_point = 17
TTC_long_threshold = 15
#TTC_long_threshold2 = 15
TTC_lat_threshold = 3
reward_safety = 0
for i in range(2):
    TTC_long = opponents[i+base_point]
    if TTC_long < TTC_long_threshold:
        reward_safety = -1.0
        break


for j in range(11):
    if opponents[j+22] < TTC_lat_threshold:
        reward_safety = -0.5
        break



reward_pos = (5 - racePos)/5

'''
trackPos_dif = np.abs(trackPos+0.5)

speed_dif = np.abs(sp-self.default_speed)/(self.default_speed)

reward = reward_pos - trackPos_dif - speed_dif
'''

reward_speed = (spX*np.cos(obs['angle']) - np.abs(spX*np.sin(obs['angle'])))/120
reward_track =  - spX * np.abs(obs['trackPos']+0.5)/120


print("reward speed:",reward_speed,"reward track:",reward_track,"reward pos:",reward_pos,"reward safety:",reward_safety)

reward = reward_pos + (reward_speed + reward_track) + reward_safety




episode_terminate = False
# collision detection
if obs['damage'] - obs_pre['damage'] > 0:
    reward = -1.0
    #episode_terminate = True
    #client.R.d['meta'] = True


if (abs(track.any()) > 1 or abs(trackPos) > 1):  # Episode is terminated if the car is out of track
    reward = -1.1
    episode_terminate = True
    client.R.d['meta'] = True
